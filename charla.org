#+TITLE: Rust
#+REVEAL_TRANS: fade
#+OPTIONS: reveal-control
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+REVEAL_THEME: league
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/monokai.css


* Rust
  [[./img/rust_logo.svg]]

** Que es Rust?
   Rust es un lenguaje de programación con un enfoque en
   seguridad, concurrencia y "velocidad de ejecución".

** Ejemplo C
   #+begin_src c
     #include <stdlib.h>
     #include <stdio.h>

     void rellenar(int* nums);

     int main() {
       int *nums = malloc(32 * sizeof(int)); // Asignar memoria
       if (nums == NULL) {                   // Comprobar errores
         return 1;
       }
       rellenar(nums);
       for (usize_t i=0; i < 32; i++) {      // Iterar el array
         printf("%d\n", nums[i]);
       }
       free(nums);                           // Liberar memoria
       return 0;                             // Return explicito
     }
   #+end_src

** Ejemplo Rust

   #+begin_src rust
     use std::vec::Vec;

     fn main() {
       let nums: vec<isize> = Vec::with_capacity(32);
       rellenar(&nums);
       nums.for_each(|i| {
         println!("{}", i);
       });
     }
   #+end_src

* Por qué Rust?
  - Evitar (muchos) bugs de memoria
  - Mantenibilidad y escalabilidad
  - Sistema de tipos
    - Interfaces
    - Abstracciones
  - Gestión de memoria semiautomática
    - RAII
    - Borrow Checker

* Instalación
** Rustup
   Gestión de versiones y herramientas del lenguaje
*** Descarga
    Desde https://rustup.rs
   #+begin_src sh
     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
   #+end_src
    
*** Comandos importantes
   #+begin_src 
# Installation of a toolchain
$ rustup install stable

# Selection of a default toolchain
$ rustup default stable

# Override the default toolchain in your directory
$ rustup override stable

# Display documentation in browser
$ rustup doc [--std]

# List supported targets
$ rustup target list

# Add and install a target to the toolchain
$ rustup target add <target>

# List and add components
$ rustup component list|add
   #+end_src
   
** Compilador
   #+begin_src sh
     rustc helloworld.rs
   #+end_src
   
*** Ejemplo
    Hello world!
    
** Cargo
*** Build system
   #+begin_src sh
     cargo init
     cargo build
     cargo run
   #+end_src

*** Gestor de paquetes, dependencias
   #+begin_src sh
     cat Cargo.toml Cargo.lock
   #+end_src

*** Gestor de herramientas
   #+begin_src sh
     cargo install cargo-tree
   #+end_src

* Proyecto
  Podemos usar ~code~, ~vim~, ~emacs~, ~atom~, ~intellij~, etc.
  #+begin_src sh
    cargo init hello_rust
    cd hello_rust
    ${EDITOR} .
  #+end_src

* Sintaxis
  Sintaxis muy familiar a C++
** Básicos
*** Enteros
   #+begin_src rust
     let x: i8    = 0; 
     let x: u8    = 0; // Ensombrecimiento de variable
     let x: i64   = 0; // |
     let x: usize = 0; // |
   #+end_src
*** Flotantes
   #+begin_src rust
     let x: f32 = 0; 
   #+end_src
*** Arrays
    #+begin_src rust
     let x: [usize; 6] = [1,2,3,4,5,6];
    #+end_src
*** Slices
    #+begin_src rust
      let x: [usize; 6] = [1,2,3,4,5,6];
      let y: &[usize] = &x[1..5];
      for i in y {
        println!("{}", i);
      }
    #+end_src
*** Tipo Unidad
    #+begin_src rust
      fn main() -> () {
        println!("Hello world");
      }
    #+end_src
    
** Estructuras
   Definición:
   #+begin_src rust
     struct Alumno {
       nombre: String,
       years_til_grad: u64,
     }
   #+end_src
   
   Creación:
   #+begin_src rust
     let alumno = Alumno {
         nombre: "Pepe".to_owned(),
         years_til_grad: 999
     };
   #+end_src

** Enums
   Los de toda la vida:
   #+begin_src rust
     enum Color {
         Azul,
         Amarillo,
         Rojo,
         Verde,
         Naranja,
     }
   #+end_src

   Los que contienen algo más:
   #+begin_src rust
     enum Result<T, E> {
        Ok(T),
        Err(E),
     }
   #+end_src

** Funciones!!!
  #+begin_src rust
    fn function_name(param1: TypeConstructor<Type>) -> ReturnType {
        // ...
        return_value // NOTA: No hay punto y coma
                     // para return implícito
    }
  #+end_src
  
** Métodos
   #+begin_src rust
     impl Alumno {
         fn new(name: String, years: u64) -> Alumno {
             Alumno {
                 name: name,
                 years_til_grad: years,
             }
         }
    
         fn graduation_year(&self, current_year: u64) -> u64 {
             current_year + self.years_til_grad
         }
     }
   #+end_src
   
** Ejemplo
   Ejemplo graduación
   
* Match
  Un ~switch~ en esteroides
  #+begin_src rust
    let mut args = std::env::args();

    match args.nth(1) {
        Some(arg) => println!("Argumento 1: {}", arg),
        None => println!("No hay argumentos"),
    }
  #+end_src
   
** Más usos
  #+begin_src rust
    let mut args = std::env::args();

    match args.nth(1) {
        Some("arg") => println!("Argumento 1 es arg"),
        _ => println!("El argumento 1 no es arg o no hay argumento 1"),
    }
  #+end_src

* Constructores y destructores
  Tampoco los tiene

** Espera, me habías dicho que podía hacer OOP
   - Rust no permite tener valores no inicializados
   - Por convención hay un método estático ~new()~
   - Los destructores se implementan mediante la interfaz ~drop~
   
* NULL
  tampoco

* Excepciones
  Nope, we don't do that here
* Pero, sin excepciones...
  Como manejamos los errores?
  
** Mediante el tipo ~Result<T,E>~
   Si la función puede fallar, retorna un ~Result~
   #+begin_src rust
     fn this_can_fail(succeeds: bool) -> Result<String, String> {
         if succeeds {
             Ok(String::from("Success"))
         } else {
             Err(String::from("Error"))
         }
     }

     fn main() {
         let outcome = this_can_fail(true);
         println!("{:?}", outcome);
     }
   #+end_src
   
** Usando match
   #+begin_src rust
fn main() {
    match this_can_fail(false) {
        Ok(val) => println!("Success: {}", val),
        Err(err) => println!("Error: {}", err),
    }
}
   #+end_src
   
** Mediante ~?~
   #+begin_src rust
fn multiple_possible_failures() -> Result<String,String> {
    this_can_fail(true)?;
    println!("After 1st potential error.");
    this_can_fail(false)?;
    println!("After 2nd potential error.");
    Ok(String::from("All done."))
}
   #+end_src

** Result envuelve tipos
   - Se puede pasar de Result<T,E> -> Result<U,E>
   - Se puede pasar de Result<T,E> -> Result<T,X>
   #+begin_src rust
     fn main() {
         let some_result = this_can_fail(true);
         // Only done if `some_result` is an `Ok` Variant.
         let mapped_result = some_result.map(|val| val.len());
         let mapped_result = some_result.map_err(|val| val.len());
         println!("{:?}", mapped_result);
     }
   #+end_src

* Sistema de ~Ownership~
  Cuatro Reglas:
  - Solo hay un propietario
  - La posesión puede ser traspasada
  - El propietario es el responsable de devolver los recursos
  - El propietario tiene todo el poder sobre los datos y puede mutarlos
    
** Implicaciones
   - Fundamental para Rust
   - Se comprueban al compilar
   - Son extensibles
   
** Ejemplo
*** Parte 1
   #+begin_src rust
     #[derive(Debug)]
     struct Dot {
         x: i32,
         y: i32
     }

     fn main() {
         let dot = Dot { x: 1, y: 2 };
         pacman(dot);
     }

     fn pacman(dot: Dot) {
         println!("Eating {:?}", dot);
     }
   #+end_src 
   
   ~dot~ en ~main~ es la propietaria de ~Dot {x:1,y:2}~

*** Y si volvemos a usar dot??

*** Parte 2
    #+begin_src rust
      #[derive(Debug)]
      struct Dot {
          x: i32,
          y: i32
      }

      fn main() {
          let dot = Dot { x: 1, y: 2 };
          pacman(dot);
          pacman(dot);
      }

      fn pacman(dot: Dot) {
          println!("Eating {:?}", dot);
      }
    #+end_src
    
    
*** No se puede!
    ~pacman~ ha consumido el valor de dot
    - el valor se ha movido
    - dot ya no es el propietario y no puede usar el valor

*** Solución (bueno, más o menos)
    #+begin_src rust
      #[derive(Debug, Clone)]
      struct Dot {
          x: i32,
          y: i32
      }

      fn main() {
          let dot = Dot { x: 1, y: 2 };
          pacman(dot.clone());
          pacman(dot);
      }

      fn pacman(dot: Dot) {
          println!("Eating {:?}", dot);
      }
    #+end_src

    ~.clone()~ implica coste a la hora de copiar los datos
    - Clonar una lista es caro

*** Copy
    #+begin_src rust
      #[derive(Debug, Clone, Copy)]
      //---------------------^^^^--
      struct Dot {
          x: i32,
          y: i32
      }

      fn main() {
          let dot = Dot { x: 1, y: 2 };
          pacman(dot);
          pacman(dot);
      }

      fn pacman(dot: Dot) {
          println!("Eating {:?}", dot);
      }
    #+end_src

    Ahora si funciona

*** Copy vs Clone
    - Clone es explícito
    - Copy es para:
      - Datos que se pueden copiar rápido (~memcpy~)
      - Está permitido copiarlos (No un descriptor de archivo)

** Quiz time!
*** Que pasa si volvemos a llamar ~use_file~ con ~file~?
    #+begin_src rust
      use std::fs::File;

      fn main() {
          let file = File::open("test").unwrap();

          use_file(file);
      }

      fn use_file(f: File) {
          // File drops here
      }
    #+end_src
    
*** Como sería la implementación?
    Si drop es la función que desaloja un valor de forma inmediata
    
    #+begin_src rust
      use std::fs::File;

      fn main() {
          let file = File::open("test").unwrap();
          let buffer = read_from(&file);
          drop(file);
          // do something long
      }
    #+end_src

*** Solución
    #+begin_src rust
      #[inline]
      fn drop<T>(_: T) {
          // Toma propiedad e impide reutilización
          // del valor cuando se acaba el scope
      }
    #+end_src

* También puedes prestar
  Si solo usamos copy, clone y transferimos propiedad,
  se hace muy ineficaz o no podemos reusar los valores

** Ejemplo
   #+begin_src rust
     #[derive(Debug)]
     struct Point {
         x: i32,
         y: i32 
     }

     fn main() {
         let mut point = Point { x: 1, y: 2 };
         inspect(&point);
         point.x = 2;
         inspect(&point);
     }

     fn inspect(p: &Point) {
         println!("{:?}", p);
     }
   #+end_src

   
*** Siempre podemos prestar si nos lo devuelven como lo dimos

*** Pero, si queremos cambiar las cosas?
    #+begin_src rust
      #[derive(Debug)]
      struct Point {
          x: i32,
          y: i32
      }

      fn main() {
          let mut point = Point { x: 1, y: 2 };
          inspect(&point);
          move_point(&mut point, 3, 3);
          inspect(&point);
      }

      fn move_point(p: &mut Point, x: i32, y: i32) {
          p.x = x;
          p.y = y;
      }
    #+end_src

*** Solo podemos prestar mutáblemente una vez

** Las reglas
   - Se puede prestar inmutablemente cuanto quieras
   - Pero solo puede haber un préstamo mutable
     
   Se mantiene la propiedad en el sitio de llamada y
   no se desaloja hasta que el propietario se va del
   contexto.

*** Por qué estas reglas?
    #+begin_src rust
      fn push_all(on: &mut Vec<u8>, from: &Vec<u8>) {
          // cuerpo
      }
    #+end_src 

** Préstamos (Borrows) son Referencias
   Hay que desreferenciarlas de vez en cuando
   #+begin_src rust
    let number: &mut i32 = &mut 4;
    *number = 10;
    println!("{}", number);
   #+end_src
